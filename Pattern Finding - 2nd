### rename columns 

dura = pd.read_csv('enroll_numerical.csv')
dura = dura.drop(dura.columns[0],axis=1)
dura.rename({'duration': 'Duration'},axis=1,inplace=True)

### rename values

newdf.replace('Plaque Psoriasis (PSO) High Touch Journey', 'PSO High',inplace=True)
newdf.replace('Plaque Psoriasis (PSO) Low Touch Journey', 'PSO Low',inplace=True)
newdf.replace('Pre Script Journey', 'Pre Script',inplace=True)

### remove outliers

jxzb.drop(jxzb[jxzb['Journey_Pre Script Journey']==1].index, inplace=True)
jxzb.drop('Journey_Pre Script Journey',axis=1,inplace=True)
jxzb.shape
jxzb.drop(jxzb[(jxzb['Duration']>400)&(jxzb['CurrentStatus']=='Complete')].index,inplace=True)
jxzb.shape
df = jxzb
df.loc[df['no_records']==1,'EnrolmentMethod'].hist()

### create binary feature according to ranges

df['topic5_cat']=df['topic5_existence']
df.loc[df['topic5_existence']>=1,'topic5_cat']='yes'
df.loc[df['topic5_existence']==0,'topic5_cat']='no'

### calculate the correlation between columns

coscore=abs(df[df.columns[1:]].corr()['topic5_existence'][:])

coscore.loc[coscore>0.3]

### create contingency table for columns and do fisher's test

contigency= pd.crosstab(df1['topic5_cat'], df1['CurrentStatus']) 

from scipy.stats import chi2_contingency
from scipy.stats import fisher_exact

#contigency=contigency.drop(index='Unknown')
oddsratio, pvalue = fisher_exact(contigency,'less')
pvalue

### count the value 

df.groupby('sentiment_cat').count()
df.groupby('topic5_cat').count()
df.loc[df['topic5_cat']=='hyes',].groupby('sentiment_cat').count()

### process datetime

1. two ways to transform time format

from datetime import datetime

dates['LatestStatusChange']= dates['LatestStatusChange'].apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S.000"))
dates['CreateDate']= dates['CreateDate'].apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S.000"))
dates['EnrolmentDate']= dates['EnrolmentDate'].apply(lambda x: datetime.strptime(x, "%Y-%m-%d %H:%M:%S.000"))

dates['TreatmentStartDate'] = pd.to_datetime(dates['TreatmentStartDate'], format='%Y-%m-%d %H:%M:%S.000') 

2. calculate the days between two dates

dates['DaysToEnd']=(dates['LatestStatusChange']-dates['CreateDate']).dt.days
dates['DaysToStart']=(dates['CreateDate']-dates['TreatmentStartDate']).dt.days
dates['DaysToStart_per']=dates['DaysToStart']/(dates['DaysToStart']+dates['DaysToEnd'])*100

### calculate synonyms tfidf values

df['sumofsurvey']=df['completed survey'].values+df['survey completed'].values+df['screener completed'].values+
                  df['answered survey'].values+df['survey attended'].values+df['question answered'].values
